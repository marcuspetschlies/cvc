# ##########
work=/work/marcuspe
srcdir=../
limedir=$(work)/lime-1.3.2/build.ubuntu

lemondir=$(work)/lemon/build.ubuntu
tmLQCD=$(work)/build_tmLQCD_main_2dim
tmLQCD_src=/opt/tmLQCD_main/tmLQCD_main

fftwdir=$(work)/fftw-2.1.5/build.ubuntu
arpackdir=/opt/qlua/build/arpack
lapackdir=/opt/qlua/build/lapack
lhpcdir=/opt/qlua/build/aff


CXX=mpic++ -fopenmp
CXXFLAGS= -Wall -g -O3 -DF_ -DHAVE_MPI -DHAVE_TMLQCD_LIBWRAPPER -DPARALLELTX -DHAVE_LIBLEMON -DTM_USE_MPI -DHAVE_LHPC_AFF -DHAVE_OPENMP
# -DHAVE_LHPC_AFF
CCDEP = g++
DEPFLAGS = -MM

INCLUDE = -I$(lemondir)/include -I$(limedir)/include/ -I$(srcdir) -I$(fftwdir)/include -I. -I$(tmLQCD_src)/include -I$(lhpcdir)/include

LIBS = -L$(lhpcdir)/lib -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L$(tmLQCD)/lib/ -lwrapper -lhmc -lmonomial -loperator -lsolver -linit -lmeas -llinalg -lhmc -lxchange -lrational -lio -llemon -llime -lparpack -larpack $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff

### -lbuffers -lhmc -linit -lio -llinalg -lmonomial -loperator  -lrational -lsolver -lwrapper -lxchange

LDFLAGS = -fopenmp -L$(lhpcdir)/lib -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L/usr/lib/ -L$(tmLQCD)/lib -lwrapper -lhmc -lmonomial -loperator -lsolver -linit -lmeas -llinalg -lhmc -lxchange -lrational -lio -llemon -llime -lparpack -larpack  $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff


LINK = $(CXX) -o $@ ${LDFLAGS}
COMPILE = ${CXX} $(INCLUDE) -o $@ ${CXXFLAGS}

MODULES = DML_crc32 dml getopt cvc_utils cvc_geometry mpi_init io io_utils propagator_io read_input_parser_cvc \
	  get_index gauge_io contractions_io ranlxd ranlxs Q_phi set_default \
	  Q_clover_phi prepare_source matrix_init project make_x_orbits smearing_techniques \
	  prepare_propagator scalar_products rotations contract_factorized gitversion



HEADERS = getopt cvc_complex cvc_geometry cvc_linalg iblas icontract cvc_utils default_input_values dml global io io_utils \
	  mpi_init propagator_io read_input_parser get_index gauge_io contractions_io \
	  ranlxd ranlxs Q_phi set_default laplace_linalg Q_clover_phi \
	  prepare_source matrix_init project make_x_orbits smearing_techniques \
	  prepare_propagator scalar_products rotations contract_factorized


PROGRAM =  piN2piN_factorized test_smearing

all: dep $(PROGRAM) 


# ##########


$(addsuffix .d,$(MODULES)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

$(addsuffix .d,$(PROGRAM)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

dep: $(addsuffix .d,$(MODULES) ${PROGRAM})

$(addsuffix .o,${MODULES}): %.o: ${srcdir}/%.cpp $(addprefix ${srcdir}/, $(addsuffix .h, ${HEADERS})) %.d
	${COMPILE} ${OPTARGS} -c $< 

$(addsuffix .o,${PROGRAM}): %.o: ${srcdir}/%.cpp %.d
	${COMPILE} ${OPTARGS} -c $< 

${PROGRAM}: %: %.o gitversion.cpp $(addsuffix .o,${MODULES})
	${LINK}  $(addsuffix .o,${MODULES}) $@.o $(LIBS)


gitversion.cpp: ${srcdir}/.git/HEAD ${srcdir}/.git/index
	echo "namespace cvc { const char *g_gitversion = \"$(shell git rev-parse HEAD)\"; }" > ${srcdir}/gitversion.cpp

read_input_parser_cvc.cpp: ${srcdir}/read_input_parser_cvc.l
	${LEX} -P cvc_ -i -t $< > ${srcdir}/read_input_parser_cvc.cpp


# ##########


clean:
	rm -f *~ *.o *.d $(PROGRAM) ${srcdir}/gitversion.cpp

.PHONY: clean

# ##########
