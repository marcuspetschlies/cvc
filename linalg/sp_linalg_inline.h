#ifndef _SP_LINALG_INLINE_H
#define _SP_LINALG_INLINE_H
#include <math.h>
#include "cvc_complex.h"
#include "cvc_linalg.h"

namespace cvc {

// spinor dimension: 4
// color dimension: 3

static inline void _sp_eq_zero(spinor_propagator_type _r) {
(_r)[ 0][ 0] = 0.;
(_r)[ 0][ 1] = 0.;
(_r)[ 0][ 2] = 0.;
(_r)[ 0][ 3] = 0.;
(_r)[ 0][ 4] = 0.;
(_r)[ 0][ 5] = 0.;
(_r)[ 0][ 6] = 0.;
(_r)[ 0][ 7] = 0.;
(_r)[ 1][ 0] = 0.;
(_r)[ 1][ 1] = 0.;
(_r)[ 1][ 2] = 0.;
(_r)[ 1][ 3] = 0.;
(_r)[ 1][ 4] = 0.;
(_r)[ 1][ 5] = 0.;
(_r)[ 1][ 6] = 0.;
(_r)[ 1][ 7] = 0.;
(_r)[ 2][ 0] = 0.;
(_r)[ 2][ 1] = 0.;
(_r)[ 2][ 2] = 0.;
(_r)[ 2][ 3] = 0.;
(_r)[ 2][ 4] = 0.;
(_r)[ 2][ 5] = 0.;
(_r)[ 2][ 6] = 0.;
(_r)[ 2][ 7] = 0.;
(_r)[ 3][ 0] = 0.;
(_r)[ 3][ 1] = 0.;
(_r)[ 3][ 2] = 0.;
(_r)[ 3][ 3] = 0.;
(_r)[ 3][ 4] = 0.;
(_r)[ 3][ 5] = 0.;
(_r)[ 3][ 6] = 0.;
(_r)[ 3][ 7] = 0.;
}


static inline void _sp_eq_sp(spinor_propagator_type _r, spinor_propagator_type _s) {
(_r)[ 0][ 0] = (_s)[ 0][ 0];
(_r)[ 0][ 1] = (_s)[ 0][ 1];
(_r)[ 0][ 2] = (_s)[ 0][ 2];
(_r)[ 0][ 3] = (_s)[ 0][ 3];
(_r)[ 0][ 4] = (_s)[ 0][ 4];
(_r)[ 0][ 5] = (_s)[ 0][ 5];
(_r)[ 0][ 6] = (_s)[ 0][ 6];
(_r)[ 0][ 7] = (_s)[ 0][ 7];
(_r)[ 1][ 0] = (_s)[ 1][ 0];
(_r)[ 1][ 1] = (_s)[ 1][ 1];
(_r)[ 1][ 2] = (_s)[ 1][ 2];
(_r)[ 1][ 3] = (_s)[ 1][ 3];
(_r)[ 1][ 4] = (_s)[ 1][ 4];
(_r)[ 1][ 5] = (_s)[ 1][ 5];
(_r)[ 1][ 6] = (_s)[ 1][ 6];
(_r)[ 1][ 7] = (_s)[ 1][ 7];
(_r)[ 2][ 0] = (_s)[ 2][ 0];
(_r)[ 2][ 1] = (_s)[ 2][ 1];
(_r)[ 2][ 2] = (_s)[ 2][ 2];
(_r)[ 2][ 3] = (_s)[ 2][ 3];
(_r)[ 2][ 4] = (_s)[ 2][ 4];
(_r)[ 2][ 5] = (_s)[ 2][ 5];
(_r)[ 2][ 6] = (_s)[ 2][ 6];
(_r)[ 2][ 7] = (_s)[ 2][ 7];
(_r)[ 3][ 0] = (_s)[ 3][ 0];
(_r)[ 3][ 1] = (_s)[ 3][ 1];
(_r)[ 3][ 2] = (_s)[ 3][ 2];
(_r)[ 3][ 3] = (_s)[ 3][ 3];
(_r)[ 3][ 4] = (_s)[ 3][ 4];
(_r)[ 3][ 5] = (_s)[ 3][ 5];
(_r)[ 3][ 6] = (_s)[ 3][ 6];
(_r)[ 3][ 7] = (_s)[ 3][ 7];
}


static inline void _sp_eq_sp_transposed(spinor_propagator_type _r, spinor_propagator_type _s) {
(_r)[ 0][ 0] = (_s)[ 0][ 0];
(_r)[ 0][ 1] = (_s)[ 0][ 1];
(_r)[ 0][ 2] = (_s)[ 1][ 0];
(_r)[ 0][ 3] = (_s)[ 1][ 1];
(_r)[ 0][ 4] = (_s)[ 2][ 0];
(_r)[ 0][ 5] = (_s)[ 2][ 1];
(_r)[ 0][ 6] = (_s)[ 3][ 0];
(_r)[ 0][ 7] = (_s)[ 3][ 1];
(_r)[ 1][ 0] = (_s)[ 0][ 2];
(_r)[ 1][ 1] = (_s)[ 0][ 3];
(_r)[ 1][ 2] = (_s)[ 1][ 2];
(_r)[ 1][ 3] = (_s)[ 1][ 3];
(_r)[ 1][ 4] = (_s)[ 2][ 2];
(_r)[ 1][ 5] = (_s)[ 2][ 3];
(_r)[ 1][ 6] = (_s)[ 3][ 2];
(_r)[ 1][ 7] = (_s)[ 3][ 3];
(_r)[ 2][ 0] = (_s)[ 0][ 4];
(_r)[ 2][ 1] = (_s)[ 0][ 5];
(_r)[ 2][ 2] = (_s)[ 1][ 4];
(_r)[ 2][ 3] = (_s)[ 1][ 5];
(_r)[ 2][ 4] = (_s)[ 2][ 4];
(_r)[ 2][ 5] = (_s)[ 2][ 5];
(_r)[ 2][ 6] = (_s)[ 3][ 4];
(_r)[ 2][ 7] = (_s)[ 3][ 5];
(_r)[ 3][ 0] = (_s)[ 0][ 6];
(_r)[ 3][ 1] = (_s)[ 0][ 7];
(_r)[ 3][ 2] = (_s)[ 1][ 6];
(_r)[ 3][ 3] = (_s)[ 1][ 7];
(_r)[ 3][ 4] = (_s)[ 2][ 6];
(_r)[ 3][ 5] = (_s)[ 2][ 7];
(_r)[ 3][ 6] = (_s)[ 3][ 6];
(_r)[ 3][ 7] = (_s)[ 3][ 7];
}


static inline void _sp_pl_eq_sp(spinor_propagator_type _r, spinor_propagator_type _s) {
(_r)[ 0][ 0] += (_s)[ 0][ 0];
(_r)[ 0][ 1] += (_s)[ 0][ 1];
(_r)[ 0][ 2] += (_s)[ 0][ 2];
(_r)[ 0][ 3] += (_s)[ 0][ 3];
(_r)[ 0][ 4] += (_s)[ 0][ 4];
(_r)[ 0][ 5] += (_s)[ 0][ 5];
(_r)[ 0][ 6] += (_s)[ 0][ 6];
(_r)[ 0][ 7] += (_s)[ 0][ 7];
(_r)[ 1][ 0] += (_s)[ 1][ 0];
(_r)[ 1][ 1] += (_s)[ 1][ 1];
(_r)[ 1][ 2] += (_s)[ 1][ 2];
(_r)[ 1][ 3] += (_s)[ 1][ 3];
(_r)[ 1][ 4] += (_s)[ 1][ 4];
(_r)[ 1][ 5] += (_s)[ 1][ 5];
(_r)[ 1][ 6] += (_s)[ 1][ 6];
(_r)[ 1][ 7] += (_s)[ 1][ 7];
(_r)[ 2][ 0] += (_s)[ 2][ 0];
(_r)[ 2][ 1] += (_s)[ 2][ 1];
(_r)[ 2][ 2] += (_s)[ 2][ 2];
(_r)[ 2][ 3] += (_s)[ 2][ 3];
(_r)[ 2][ 4] += (_s)[ 2][ 4];
(_r)[ 2][ 5] += (_s)[ 2][ 5];
(_r)[ 2][ 6] += (_s)[ 2][ 6];
(_r)[ 2][ 7] += (_s)[ 2][ 7];
(_r)[ 3][ 0] += (_s)[ 3][ 0];
(_r)[ 3][ 1] += (_s)[ 3][ 1];
(_r)[ 3][ 2] += (_s)[ 3][ 2];
(_r)[ 3][ 3] += (_s)[ 3][ 3];
(_r)[ 3][ 4] += (_s)[ 3][ 4];
(_r)[ 3][ 5] += (_s)[ 3][ 5];
(_r)[ 3][ 6] += (_s)[ 3][ 6];
(_r)[ 3][ 7] += (_s)[ 3][ 7];
}


static inline void _sp_pl_eq_sp_ti_re(spinor_propagator_type _r, spinor_propagator_type _s, double _c) {
(_r)[ 0][ 0] += (_s)[ 0][ 0] * (_c);
(_r)[ 0][ 1] += (_s)[ 0][ 1] * (_c);
(_r)[ 0][ 2] += (_s)[ 0][ 2] * (_c);
(_r)[ 0][ 3] += (_s)[ 0][ 3] * (_c);
(_r)[ 0][ 4] += (_s)[ 0][ 4] * (_c);
(_r)[ 0][ 5] += (_s)[ 0][ 5] * (_c);
(_r)[ 0][ 6] += (_s)[ 0][ 6] * (_c);
(_r)[ 0][ 7] += (_s)[ 0][ 7] * (_c);
(_r)[ 1][ 0] += (_s)[ 1][ 0] * (_c);
(_r)[ 1][ 1] += (_s)[ 1][ 1] * (_c);
(_r)[ 1][ 2] += (_s)[ 1][ 2] * (_c);
(_r)[ 1][ 3] += (_s)[ 1][ 3] * (_c);
(_r)[ 1][ 4] += (_s)[ 1][ 4] * (_c);
(_r)[ 1][ 5] += (_s)[ 1][ 5] * (_c);
(_r)[ 1][ 6] += (_s)[ 1][ 6] * (_c);
(_r)[ 1][ 7] += (_s)[ 1][ 7] * (_c);
(_r)[ 2][ 0] += (_s)[ 2][ 0] * (_c);
(_r)[ 2][ 1] += (_s)[ 2][ 1] * (_c);
(_r)[ 2][ 2] += (_s)[ 2][ 2] * (_c);
(_r)[ 2][ 3] += (_s)[ 2][ 3] * (_c);
(_r)[ 2][ 4] += (_s)[ 2][ 4] * (_c);
(_r)[ 2][ 5] += (_s)[ 2][ 5] * (_c);
(_r)[ 2][ 6] += (_s)[ 2][ 6] * (_c);
(_r)[ 2][ 7] += (_s)[ 2][ 7] * (_c);
(_r)[ 3][ 0] += (_s)[ 3][ 0] * (_c);
(_r)[ 3][ 1] += (_s)[ 3][ 1] * (_c);
(_r)[ 3][ 2] += (_s)[ 3][ 2] * (_c);
(_r)[ 3][ 3] += (_s)[ 3][ 3] * (_c);
(_r)[ 3][ 4] += (_s)[ 3][ 4] * (_c);
(_r)[ 3][ 5] += (_s)[ 3][ 5] * (_c);
(_r)[ 3][ 6] += (_s)[ 3][ 6] * (_c);
(_r)[ 3][ 7] += (_s)[ 3][ 7] * (_c);
}


static inline void _sp_mi_eq_sp(spinor_propagator_type _r, spinor_propagator_type _s) {
(_r)[ 0][ 0] -= (_s)[ 0][ 0];
(_r)[ 0][ 1] -= (_s)[ 0][ 1];
(_r)[ 0][ 2] -= (_s)[ 0][ 2];
(_r)[ 0][ 3] -= (_s)[ 0][ 3];
(_r)[ 0][ 4] -= (_s)[ 0][ 4];
(_r)[ 0][ 5] -= (_s)[ 0][ 5];
(_r)[ 0][ 6] -= (_s)[ 0][ 6];
(_r)[ 0][ 7] -= (_s)[ 0][ 7];
(_r)[ 1][ 0] -= (_s)[ 1][ 0];
(_r)[ 1][ 1] -= (_s)[ 1][ 1];
(_r)[ 1][ 2] -= (_s)[ 1][ 2];
(_r)[ 1][ 3] -= (_s)[ 1][ 3];
(_r)[ 1][ 4] -= (_s)[ 1][ 4];
(_r)[ 1][ 5] -= (_s)[ 1][ 5];
(_r)[ 1][ 6] -= (_s)[ 1][ 6];
(_r)[ 1][ 7] -= (_s)[ 1][ 7];
(_r)[ 2][ 0] -= (_s)[ 2][ 0];
(_r)[ 2][ 1] -= (_s)[ 2][ 1];
(_r)[ 2][ 2] -= (_s)[ 2][ 2];
(_r)[ 2][ 3] -= (_s)[ 2][ 3];
(_r)[ 2][ 4] -= (_s)[ 2][ 4];
(_r)[ 2][ 5] -= (_s)[ 2][ 5];
(_r)[ 2][ 6] -= (_s)[ 2][ 6];
(_r)[ 2][ 7] -= (_s)[ 2][ 7];
(_r)[ 3][ 0] -= (_s)[ 3][ 0];
(_r)[ 3][ 1] -= (_s)[ 3][ 1];
(_r)[ 3][ 2] -= (_s)[ 3][ 2];
(_r)[ 3][ 3] -= (_s)[ 3][ 3];
(_r)[ 3][ 4] -= (_s)[ 3][ 4];
(_r)[ 3][ 5] -= (_s)[ 3][ 5];
(_r)[ 3][ 6] -= (_s)[ 3][ 6];
(_r)[ 3][ 7] -= (_s)[ 3][ 7];
}


static inline void _sp_eq_sp_ti_re(spinor_propagator_type _r, spinor_propagator_type _s, double _c) {
(_r)[ 0][ 0] = (_s)[ 0][ 0] * (_c);
(_r)[ 0][ 1] = (_s)[ 0][ 1] * (_c);
(_r)[ 0][ 2] = (_s)[ 0][ 2] * (_c);
(_r)[ 0][ 3] = (_s)[ 0][ 3] * (_c);
(_r)[ 0][ 4] = (_s)[ 0][ 4] * (_c);
(_r)[ 0][ 5] = (_s)[ 0][ 5] * (_c);
(_r)[ 0][ 6] = (_s)[ 0][ 6] * (_c);
(_r)[ 0][ 7] = (_s)[ 0][ 7] * (_c);
(_r)[ 1][ 0] = (_s)[ 1][ 0] * (_c);
(_r)[ 1][ 1] = (_s)[ 1][ 1] * (_c);
(_r)[ 1][ 2] = (_s)[ 1][ 2] * (_c);
(_r)[ 1][ 3] = (_s)[ 1][ 3] * (_c);
(_r)[ 1][ 4] = (_s)[ 1][ 4] * (_c);
(_r)[ 1][ 5] = (_s)[ 1][ 5] * (_c);
(_r)[ 1][ 6] = (_s)[ 1][ 6] * (_c);
(_r)[ 1][ 7] = (_s)[ 1][ 7] * (_c);
(_r)[ 2][ 0] = (_s)[ 2][ 0] * (_c);
(_r)[ 2][ 1] = (_s)[ 2][ 1] * (_c);
(_r)[ 2][ 2] = (_s)[ 2][ 2] * (_c);
(_r)[ 2][ 3] = (_s)[ 2][ 3] * (_c);
(_r)[ 2][ 4] = (_s)[ 2][ 4] * (_c);
(_r)[ 2][ 5] = (_s)[ 2][ 5] * (_c);
(_r)[ 2][ 6] = (_s)[ 2][ 6] * (_c);
(_r)[ 2][ 7] = (_s)[ 2][ 7] * (_c);
(_r)[ 3][ 0] = (_s)[ 3][ 0] * (_c);
(_r)[ 3][ 1] = (_s)[ 3][ 1] * (_c);
(_r)[ 3][ 2] = (_s)[ 3][ 2] * (_c);
(_r)[ 3][ 3] = (_s)[ 3][ 3] * (_c);
(_r)[ 3][ 4] = (_s)[ 3][ 4] * (_c);
(_r)[ 3][ 5] = (_s)[ 3][ 5] * (_c);
(_r)[ 3][ 6] = (_s)[ 3][ 6] * (_c);
(_r)[ 3][ 7] = (_s)[ 3][ 7] * (_c);
}


static inline void _sp_eq_sp_ti_im(spinor_propagator_type _r, spinor_propagator_type _s, double _c) {
(_r)[ 0][ 0] = -(_s)[ 0][ 1] * (_c);
(_r)[ 0][ 1] = +(_s)[ 0][ 0] * (_c);
(_r)[ 0][ 2] = -(_s)[ 0][ 3] * (_c);
(_r)[ 0][ 3] = +(_s)[ 0][ 2] * (_c);
(_r)[ 0][ 4] = -(_s)[ 0][ 5] * (_c);
(_r)[ 0][ 5] = +(_s)[ 0][ 4] * (_c);
(_r)[ 0][ 6] = -(_s)[ 0][ 7] * (_c);
(_r)[ 0][ 7] = +(_s)[ 0][ 6] * (_c);
(_r)[ 1][ 0] = -(_s)[ 1][ 1] * (_c);
(_r)[ 1][ 1] = +(_s)[ 1][ 0] * (_c);
(_r)[ 1][ 2] = -(_s)[ 1][ 3] * (_c);
(_r)[ 1][ 3] = +(_s)[ 1][ 2] * (_c);
(_r)[ 1][ 4] = -(_s)[ 1][ 5] * (_c);
(_r)[ 1][ 5] = +(_s)[ 1][ 4] * (_c);
(_r)[ 1][ 6] = -(_s)[ 1][ 7] * (_c);
(_r)[ 1][ 7] = +(_s)[ 1][ 6] * (_c);
(_r)[ 2][ 0] = -(_s)[ 2][ 1] * (_c);
(_r)[ 2][ 1] = +(_s)[ 2][ 0] * (_c);
(_r)[ 2][ 2] = -(_s)[ 2][ 3] * (_c);
(_r)[ 2][ 3] = +(_s)[ 2][ 2] * (_c);
(_r)[ 2][ 4] = -(_s)[ 2][ 5] * (_c);
(_r)[ 2][ 5] = +(_s)[ 2][ 4] * (_c);
(_r)[ 2][ 6] = -(_s)[ 2][ 7] * (_c);
(_r)[ 2][ 7] = +(_s)[ 2][ 6] * (_c);
(_r)[ 3][ 0] = -(_s)[ 3][ 1] * (_c);
(_r)[ 3][ 1] = +(_s)[ 3][ 0] * (_c);
(_r)[ 3][ 2] = -(_s)[ 3][ 3] * (_c);
(_r)[ 3][ 3] = +(_s)[ 3][ 2] * (_c);
(_r)[ 3][ 4] = -(_s)[ 3][ 5] * (_c);
(_r)[ 3][ 5] = +(_s)[ 3][ 4] * (_c);
(_r)[ 3][ 6] = -(_s)[ 3][ 7] * (_c);
(_r)[ 3][ 7] = +(_s)[ 3][ 6] * (_c);
}

static inline void _sp_pl_eq_sp_ti_im(spinor_propagator_type _r, spinor_propagator_type _s, double _c) {
(_r)[ 0][ 0] += -(_s)[ 0][ 1] * (_c);
(_r)[ 0][ 1] += +(_s)[ 0][ 0] * (_c);
(_r)[ 0][ 2] += -(_s)[ 0][ 3] * (_c);
(_r)[ 0][ 3] += +(_s)[ 0][ 2] * (_c);
(_r)[ 0][ 4] += -(_s)[ 0][ 5] * (_c);
(_r)[ 0][ 5] += +(_s)[ 0][ 4] * (_c);
(_r)[ 0][ 6] += -(_s)[ 0][ 7] * (_c);
(_r)[ 0][ 7] += +(_s)[ 0][ 6] * (_c);
(_r)[ 1][ 0] += -(_s)[ 1][ 1] * (_c);
(_r)[ 1][ 1] += +(_s)[ 1][ 0] * (_c);
(_r)[ 1][ 2] += -(_s)[ 1][ 3] * (_c);
(_r)[ 1][ 3] += +(_s)[ 1][ 2] * (_c);
(_r)[ 1][ 4] += -(_s)[ 1][ 5] * (_c);
(_r)[ 1][ 5] += +(_s)[ 1][ 4] * (_c);
(_r)[ 1][ 6] += -(_s)[ 1][ 7] * (_c);
(_r)[ 1][ 7] += +(_s)[ 1][ 6] * (_c);
(_r)[ 2][ 0] += -(_s)[ 2][ 1] * (_c);
(_r)[ 2][ 1] += +(_s)[ 2][ 0] * (_c);
(_r)[ 2][ 2] += -(_s)[ 2][ 3] * (_c);
(_r)[ 2][ 3] += +(_s)[ 2][ 2] * (_c);
(_r)[ 2][ 4] += -(_s)[ 2][ 5] * (_c);
(_r)[ 2][ 5] += +(_s)[ 2][ 4] * (_c);
(_r)[ 2][ 6] += -(_s)[ 2][ 7] * (_c);
(_r)[ 2][ 7] += +(_s)[ 2][ 6] * (_c);
(_r)[ 3][ 0] += -(_s)[ 3][ 1] * (_c);
(_r)[ 3][ 1] += +(_s)[ 3][ 0] * (_c);
(_r)[ 3][ 2] += -(_s)[ 3][ 3] * (_c);
(_r)[ 3][ 3] += +(_s)[ 3][ 2] * (_c);
(_r)[ 3][ 4] += -(_s)[ 3][ 5] * (_c);
(_r)[ 3][ 5] += +(_s)[ 3][ 4] * (_c);
(_r)[ 3][ 6] += -(_s)[ 3][ 7] * (_c);
(_r)[ 3][ 7] += +(_s)[ 3][ 6] * (_c);
}


static inline void _sp_eq_sp_ti_co(spinor_propagator_type _r, spinor_propagator_type _s, complex _c) {
(_r)[ 0][ 0] = +(_s)[ 0][ 0] * (_c).re - (_s)[ 0][ 1] * (_c).im;
(_r)[ 0][ 1] = +(_s)[ 0][ 0] * (_c).im + (_s)[ 0][ 1] * (_c).re;
(_r)[ 0][ 2] = +(_s)[ 0][ 2] * (_c).re - (_s)[ 0][ 3] * (_c).im;
(_r)[ 0][ 3] = +(_s)[ 0][ 2] * (_c).im + (_s)[ 0][ 3] * (_c).re;
(_r)[ 0][ 4] = +(_s)[ 0][ 4] * (_c).re - (_s)[ 0][ 5] * (_c).im;
(_r)[ 0][ 5] = +(_s)[ 0][ 4] * (_c).im + (_s)[ 0][ 5] * (_c).re;
(_r)[ 0][ 6] = +(_s)[ 0][ 6] * (_c).re - (_s)[ 0][ 7] * (_c).im;
(_r)[ 0][ 7] = +(_s)[ 0][ 6] * (_c).im + (_s)[ 0][ 7] * (_c).re;
(_r)[ 1][ 0] = +(_s)[ 1][ 0] * (_c).re - (_s)[ 1][ 1] * (_c).im;
(_r)[ 1][ 1] = +(_s)[ 1][ 0] * (_c).im + (_s)[ 1][ 1] * (_c).re;
(_r)[ 1][ 2] = +(_s)[ 1][ 2] * (_c).re - (_s)[ 1][ 3] * (_c).im;
(_r)[ 1][ 3] = +(_s)[ 1][ 2] * (_c).im + (_s)[ 1][ 3] * (_c).re;
(_r)[ 1][ 4] = +(_s)[ 1][ 4] * (_c).re - (_s)[ 1][ 5] * (_c).im;
(_r)[ 1][ 5] = +(_s)[ 1][ 4] * (_c).im + (_s)[ 1][ 5] * (_c).re;
(_r)[ 1][ 6] = +(_s)[ 1][ 6] * (_c).re - (_s)[ 1][ 7] * (_c).im;
(_r)[ 1][ 7] = +(_s)[ 1][ 6] * (_c).im + (_s)[ 1][ 7] * (_c).re;
(_r)[ 2][ 0] = +(_s)[ 2][ 0] * (_c).re - (_s)[ 2][ 1] * (_c).im;
(_r)[ 2][ 1] = +(_s)[ 2][ 0] * (_c).im + (_s)[ 2][ 1] * (_c).re;
(_r)[ 2][ 2] = +(_s)[ 2][ 2] * (_c).re - (_s)[ 2][ 3] * (_c).im;
(_r)[ 2][ 3] = +(_s)[ 2][ 2] * (_c).im + (_s)[ 2][ 3] * (_c).re;
(_r)[ 2][ 4] = +(_s)[ 2][ 4] * (_c).re - (_s)[ 2][ 5] * (_c).im;
(_r)[ 2][ 5] = +(_s)[ 2][ 4] * (_c).im + (_s)[ 2][ 5] * (_c).re;
(_r)[ 2][ 6] = +(_s)[ 2][ 6] * (_c).re - (_s)[ 2][ 7] * (_c).im;
(_r)[ 2][ 7] = +(_s)[ 2][ 6] * (_c).im + (_s)[ 2][ 7] * (_c).re;
(_r)[ 3][ 0] = +(_s)[ 3][ 0] * (_c).re - (_s)[ 3][ 1] * (_c).im;
(_r)[ 3][ 1] = +(_s)[ 3][ 0] * (_c).im + (_s)[ 3][ 1] * (_c).re;
(_r)[ 3][ 2] = +(_s)[ 3][ 2] * (_c).re - (_s)[ 3][ 3] * (_c).im;
(_r)[ 3][ 3] = +(_s)[ 3][ 2] * (_c).im + (_s)[ 3][ 3] * (_c).re;
(_r)[ 3][ 4] = +(_s)[ 3][ 4] * (_c).re - (_s)[ 3][ 5] * (_c).im;
(_r)[ 3][ 5] = +(_s)[ 3][ 4] * (_c).im + (_s)[ 3][ 5] * (_c).re;
(_r)[ 3][ 6] = +(_s)[ 3][ 6] * (_c).re - (_s)[ 3][ 7] * (_c).im;
(_r)[ 3][ 7] = +(_s)[ 3][ 6] * (_c).im + (_s)[ 3][ 7] * (_c).re;
}


static inline void _sp_eq_gamma_ti_sp(spinor_propagator_type _r, int _mu, spinor_propagator_type _s) {
int __perm[4], __isimag;
__perm[ 0] = gamma_permutation[(_mu)][ 0]/6;
__perm[ 1] = gamma_permutation[(_mu)][ 6]/6;
__perm[ 2] = gamma_permutation[(_mu)][12]/6;
__perm[ 3] = gamma_permutation[(_mu)][18]/6;
__isimag = gamma_permutation[(_mu)][0]%2;
// fprintf(stdout, "# [_sp_eq_gamma_ti_sp] isimag = %d, perm=(%d, %d, %d, %d)", __isimag, __perm[0], __perm[1], __perm[2], __perm[3]);
(_r)[ 0][ 0] = (_s)[ 0][2*__perm[ 0]  +__isimag] * gamma_sign[(_mu)][ 0];
(_r)[ 0][ 1] = (_s)[ 0][2*__perm[ 0]+1-__isimag] * gamma_sign[(_mu)][ 1];
(_r)[ 0][ 2] = (_s)[ 0][2*__perm[ 1]  +__isimag] * gamma_sign[(_mu)][ 6];
(_r)[ 0][ 3] = (_s)[ 0][2*__perm[ 1]+1-__isimag] * gamma_sign[(_mu)][ 7];
(_r)[ 0][ 4] = (_s)[ 0][2*__perm[ 2]  +__isimag] * gamma_sign[(_mu)][12];
(_r)[ 0][ 5] = (_s)[ 0][2*__perm[ 2]+1-__isimag] * gamma_sign[(_mu)][13];
(_r)[ 0][ 6] = (_s)[ 0][2*__perm[ 3]  +__isimag] * gamma_sign[(_mu)][18];
(_r)[ 0][ 7] = (_s)[ 0][2*__perm[ 3]+1-__isimag] * gamma_sign[(_mu)][19];
(_r)[ 1][ 0] = (_s)[ 1][2*__perm[ 0]  +__isimag] * gamma_sign[(_mu)][ 0];
(_r)[ 1][ 1] = (_s)[ 1][2*__perm[ 0]+1-__isimag] * gamma_sign[(_mu)][ 1];
(_r)[ 1][ 2] = (_s)[ 1][2*__perm[ 1]  +__isimag] * gamma_sign[(_mu)][ 6];
(_r)[ 1][ 3] = (_s)[ 1][2*__perm[ 1]+1-__isimag] * gamma_sign[(_mu)][ 7];
(_r)[ 1][ 4] = (_s)[ 1][2*__perm[ 2]  +__isimag] * gamma_sign[(_mu)][12];
(_r)[ 1][ 5] = (_s)[ 1][2*__perm[ 2]+1-__isimag] * gamma_sign[(_mu)][13];
(_r)[ 1][ 6] = (_s)[ 1][2*__perm[ 3]  +__isimag] * gamma_sign[(_mu)][18];
(_r)[ 1][ 7] = (_s)[ 1][2*__perm[ 3]+1-__isimag] * gamma_sign[(_mu)][19];
(_r)[ 2][ 0] = (_s)[ 2][2*__perm[ 0]  +__isimag] * gamma_sign[(_mu)][ 0];
(_r)[ 2][ 1] = (_s)[ 2][2*__perm[ 0]+1-__isimag] * gamma_sign[(_mu)][ 1];
(_r)[ 2][ 2] = (_s)[ 2][2*__perm[ 1]  +__isimag] * gamma_sign[(_mu)][ 6];
(_r)[ 2][ 3] = (_s)[ 2][2*__perm[ 1]+1-__isimag] * gamma_sign[(_mu)][ 7];
(_r)[ 2][ 4] = (_s)[ 2][2*__perm[ 2]  +__isimag] * gamma_sign[(_mu)][12];
(_r)[ 2][ 5] = (_s)[ 2][2*__perm[ 2]+1-__isimag] * gamma_sign[(_mu)][13];
(_r)[ 2][ 6] = (_s)[ 2][2*__perm[ 3]  +__isimag] * gamma_sign[(_mu)][18];
(_r)[ 2][ 7] = (_s)[ 2][2*__perm[ 3]+1-__isimag] * gamma_sign[(_mu)][19];
(_r)[ 3][ 0] = (_s)[ 3][2*__perm[ 0]  +__isimag] * gamma_sign[(_mu)][ 0];
(_r)[ 3][ 1] = (_s)[ 3][2*__perm[ 0]+1-__isimag] * gamma_sign[(_mu)][ 1];
(_r)[ 3][ 2] = (_s)[ 3][2*__perm[ 1]  +__isimag] * gamma_sign[(_mu)][ 6];
(_r)[ 3][ 3] = (_s)[ 3][2*__perm[ 1]+1-__isimag] * gamma_sign[(_mu)][ 7];
(_r)[ 3][ 4] = (_s)[ 3][2*__perm[ 2]  +__isimag] * gamma_sign[(_mu)][12];
(_r)[ 3][ 5] = (_s)[ 3][2*__perm[ 2]+1-__isimag] * gamma_sign[(_mu)][13];
(_r)[ 3][ 6] = (_s)[ 3][2*__perm[ 3]  +__isimag] * gamma_sign[(_mu)][18];
(_r)[ 3][ 7] = (_s)[ 3][2*__perm[ 3]+1-__isimag] * gamma_sign[(_mu)][19];
}


static inline void _co_eq_tr_sp(complex* _c, spinor_propagator_type _s) {
(_c)->re = 
 +(_s)[ 0][ 0]
 +(_s)[ 1][ 2]
 +(_s)[ 2][ 4]
 +(_s)[ 3][ 6]
;
(_c)->im = 
 +(_s)[ 0][ 1]
 +(_s)[ 1][ 3]
 +(_s)[ 2][ 5]
 +(_s)[ 3][ 7]
;
}


// create, free spin propagator
static inline void create_sp(spinor_propagator_type *fp) {
  *fp = (double**) malloc(4 * sizeof(double*));
  if( *fp == NULL) return;
  (*fp)[0] = (double*)malloc(32 * sizeof(double));
  if ( (*fp)[0] == NULL) {
    free( *fp );
    *fp = NULL;
    return;
  }
(*fp)[ 1] = (*fp)[ 0] + 8;
(*fp)[ 2] = (*fp)[ 1] + 8;
(*fp)[ 3] = (*fp)[ 2] + 8;
  _sp_eq_zero( *fp );
  return;
}


static inline void free_sp(spinor_propagator_type *fp) {
  if( *fp != NULL ) {
    if( (*fp)[0] != NULL) free( (*fp)[0] );
    free(*fp);
    *fp = NULL;
  }
  return;
}

}  /* end of namespace cvc */
#endif
